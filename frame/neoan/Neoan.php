<?php
/* Generated by neoan3-cli */

namespace Neoan3\Frame;

require_once 'Setup.php';

use Neoan3\Apps\Db;
use Neoan3\Apps\Cache;
use Neoan3\Apps\DbException;
use Neoan3\Apps\Hcapture;
use Neoan3\Apps\Ops;
use Neoan3\Apps\Session;
use Neoan3\Apps\SimpleTracker;
use Neoan3\Apps\Stateless;
use Neoan3\Core\Serve;
use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\SMTP;
use PHPMailer\PHPMailer\Exception;

class Neoan extends Serve {
    private   $credentials     = [];
    private   $developmentMode = true;
    private   $credentialType  = 'env';
    protected $currentAuth     = false;

    function __construct() {
        // Hybrid: construct session
        new Session();


        if(!$this->developmentMode && !Session::is_logged_in()) {
            Cache::setCaching('+2 hours');
        } else {
            Cache::invalidateAll();
        }
        if($this->developmentMode){
            $this->includeJs(base . 'node_modules/vue/dist/vue.js');
        } else {
            $this->includeJs(base . 'node_modules/vue/dist/vue.min.js');
        }
        // SETUP
        /*
         * Sharing projects oe.g via GitHub? Hide credentials and place them OUTSIDE of your server's web-root or using a .env file.
         * Set your strategy in $credentialType
         *
         * 1. VIA CREDENTIAL JSON
         *
         * ['blua_db'=>
         *  ['name'=>'your_database','assumes_uuid'=>true,'password'=>'Password','user'=>'dbUser'],
         * 'blua_stateless'=>['secret'=>'SecretKey']
         * 'blua_mail'=>
         *  ['host'=>'yourSMPThost','username'=>'yourSMTPlogin','password'=>'smtp_password'],
         * ],
         * 'blua_hcaptcha' => ['secret'=>'your-secret','siteKey'=>'your-site-key']
         *
         * 2. VIA .env FILE (default)
         *
         * rename the file .env_example to .env
         * */

        if($this->credentialType == 'env'){
            $this->credentials = Setup::envSetup();
        } else {
            try{
                $this->credentials = getCredentials();
            } catch (\Exception $e){
                print('SETUP: No credentials found. Please check README for instructions and/or change '.__FILE__.' starting at line '.(__LINE__-4).' ');
                die();
            }
        }

        // tracking
        Setup::tracker();

        // database
        Setup::db($this->credentials['blua_db']);

        // JWT/Stateless auth
        Setup::stateless($this->credentials['blua_stateless']['secret']);

        // hcaptcha
        Setup::hCaptcha($this->credentials['blua_hcaptcha']);

        parent::__construct();

        $this->vueComponent('cookieLaw');
        $this->vueComponent('header');
        $this->hook('header', 'header');
        $this->hook('footer', 'footer');

    }

    function vueComponent($element, $params = []) {
        $params['base'] = base;
        $path = path . '/component/' . $element . '/' . $element . '.ce.';
        if(file_exists($path . $this->viewExt)) {
            $this->footer .= '<template id="' . $element . '">' . $this->fileContent($path . $this->viewExt, $params) .
                             '</template>';
        }
        if(file_exists($path . $this->styleExt)) {
            $this->style .= $this->fileContent($path . $this->styleExt, $params);
        }
        if(file_exists($path . 'js')) {
            $this->js .= $this->fileContent($path . 'js', $params);
        }

        return $this;
    }

    function restrict($scope) {
        $this->currentAuth = Stateless::restrict($scope);
        return $this;
    }

    function output($params = []) {
        $this->js .= 'new Vue({el:"#root"});';
        $this->main = '<div id="root" class="main">' . $this->header . $this->main . '</div>';
        $this->header = '';
        parent::output($params);
        if(!$this->developmentMode) {
            Cache::write();
        }
    }

    function newMail() {

        $mail = new PHPMailer(true);
        if(strpos('mail.blua.blue',$this->credentials['blua_mail']['host'])===false){
            $mail->isSMTP();
        }
        $mail->Host = $this->credentials['blua_mail']['host'];
        $mail->CharSet = 'utf-8';
        $mail->SMTPAuth = true;
        $mail->SMTPSecure = isset($this->credentials['blua_mail']['secure'])? $this->credentials['blua_mail']['secure'] : 'tls';
        $mail->Username = $this->credentials['blua_mail']['username'];
        $mail->Password = $this->credentials['blua_mail']['password'];
        $mail->Port = isset($this->credentials['blua_mail']['port'])? $this->credentials['blua_mail']['port'] : 25;
        $mail->setFrom($this->credentials['blua_mail']['fromEmail'],$this->credentials['blua_mail']['fromName']);
        return $mail;
    }


    function constants() {
        return [
            'base'       => [base],
            'link'       => [
                [
                    'sizes' => '32x32',
                    'type'  => 'image/png',
                    'rel'   => 'icon',
                    'href'  => 'asset/img/blua-blue-icon-32x32.png'
                ]
            ],
            'meta'       => [
                ['name' => 'viewport', 'content' => 'width=device-width, initial-scale=1']
            ],
            'js'         => [
                ['src' => path .'/frame/neoan/global.js', 'data' => ['base' => base]],
                ['src' => base . 'asset/tinymce/js/tinymce/tinymce.min.js'],
                ['src' => base . 'node_modules/axios/dist/axios.min.js'],
                ['src' => base . 'node_modules/lodash/lodash.min.js'],
                ['src' => base . 'node_modules/moment/min/moment.min.js'],
                ['src' => path . '/frame/neoan/axios-wrapper.js', 'data' => ['base' => base]],
                ['src' => 'https://hcaptcha.com/1/api.js']
            ],
            'stylesheet' => [
                '' . base . 'frame/neoan/main.css',
                'https://fonts.googleapis.com/icon?family=Material+Icons'
            ]
        ];
    }
}
