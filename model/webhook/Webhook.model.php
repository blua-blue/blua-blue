<?php
/* Generated by neoan3-cli */

namespace Neoan3\Model;


use Neoan3\Apps\Curl;
use Neoan3\Apps\CurlException;
use Neoan3\Apps\Db;
use Neoan3\Apps\Transformer;

/**
 * Class WebhookModel
 * @method static find($array)
 * @method static delete($array)
 * @method static create($array)
 * @method static update($array)
 * @package Neoan3\Model
 */
class WebhookModel extends IndexModel
{
    static function __callStatic($name, $arguments)
    {
        return Transformer::addMagic($name, $arguments);
    }

    /**
     * @param $userId
     * @param $payload
     * @param $event
     *
     * @return array
     * @throws \Neoan3\Apps\DbException
     */
    static function send($userId, $payload, $event, $passedWebhooks=[])
    {
        $webhooks = Db::easy('webhook.*', ['user_id' => '$' . $userId, '^delete_date']);
        $answers = [];
        foreach ($webhooks as $webhook) {
            if(!self::findPassedIn($webhook, $passedWebhooks)){
                continue;
            }
            $auth = empty($webhook['token']) ? false : $webhook['token'];
            $webhookCall = false;
            try{
                $webhookCall = Curl::post($webhook['target_url'], ['event' => $event, 'payload' => $payload], $auth);
            } catch (CurlException $e){
                $webhookCall = $e->getMessage();
            }
            $answers[] = [
                'id' => $webhook['id'],
                'result' => $webhookCall
            ];
        }
        return $answers;
    }
    private static function findPassedIn($dbWebhook, $passedWebhooks): bool
    {
        $letThrough = true;
        foreach($passedWebhooks as $passedWebhook){
            if($dbWebhook['id'] === $passedWebhook['id'] && !$passedWebhook['active']){
                $letThrough = false;
            }
        }
        return $letThrough;
    }

}
