<?php
/* Generated by neoan3-cli */

namespace Neoan3\Components;

use Neoan3\Apps\Db;
use Neoan3\Apps\DbException;
use Neoan3\Apps\Ops;
use Neoan3\Apps\Session;
use Neoan3\Apps\Stateless;
use Neoan3\Core\RouteException;
use Neoan3\Core\Unicore;
use Neoan3\Frame\Neoan;
use Neoan3\Model\ImageModel;
use Neoan3\Model\IndexModel;
use Neoan3\Model\UserModel;

class Register extends Unicore
{
    private $vueElements = ['mixins', 'register', 'bluaModal'];

    function __construct()
    {
        new Neoan();
    }

    function init()
    {

        $this->uni('neoan')
             ->callback($this, 'vueComponents')
             ->hook('main', 'register')
             ->output();
    }

    /**
     * @param Neoan $uni
     */
    function vueComponents($uni)
    {
        foreach ($this->vueElements as $vueElement) {
            $uni->vueComponent($vueElement);
        }

    }

    /**
     * @return array
     * @throws DbException
     * @throws RouteException
     */
    function getRegister()
    {
        $jwt = Stateless::validate();
        $hasSession = Session::is_logged_in();
        $user = UserModel::get($jwt['jti']);
        if(!empty($user['image_id'])){
            $user['image'] = ImageModel::byId($user['image_id']);
        }
        return ['user' => $user, 'phpSession' => $hasSession];

    }

    /**
     * @param $credentials
     *
     * @return array
     * @throws DbException
     * @throws RouteException
     */
    function postRegister($credentials)
    {
        $newUser = [
            'userName' => $credentials['userName'],
            'emails' =>[['email'=>$credentials['email']]],
            'password'=>['password'=>$credentials['password']]
        ];
        try{
            $user = UserModel::create($newUser);
        } catch (\Exception $e){
            throw new RouteException($e->getMessage(), 422);
        }

        $verify = new Verify();
        $verify->confirmEmail(trim($credentials['email']), $user['emails'][0]['confirm_code']);
        $jwt = Stateless::assign($user['id'], 'user', ['exp' => time() + (2 * 60 * 60)]);
        return ['token' => $jwt];
    }

    function putRegister($body)
    {
        $user = UserModel::byId($body['userId']);
        if (empty($user)) {
            throw new RouteException('Bad Request', 400);
        }
        $password = IndexModel::first(Db::easy('user_password.id',
            ['confirm_code' => $body['confirmCode'], 'user_id' => '$' . $user['id'], '^delete_date', '^confirm_date']));
        if (empty($password)) {
            throw new RouteException('Bad Request', 400);
        }
        $insertPassword = '=' . password_hash($body['password'], PASSWORD_DEFAULT);
        Db::ask('>UPDATE user_password SET delete_date = NOW() WHERE delete_date IS NULL AND user_id = UNHEX({{user_id}}) AND id != UNHEX({{id}})',
            [
                'id'      => $password['id'],
                'user_id' => $user['id']
            ]);
        Db::user_password(['user_id' => '$' . $user['id'], 'password' => $insertPassword, 'confirm_date' => '.'],
            ['id' => '$' . $password['id']]);
        return true;

    }

}
