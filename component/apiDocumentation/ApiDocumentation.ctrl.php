<?php
/* Generated by neoan3-cli */

namespace Neoan3\Components;

use Neoan3\Core\Unicore;
use ReflectionMethod;

class ApiDocumentation extends Unicore {
    private $docString = '';
    private $apiComponents = [];
    function init(){
        $this->getComponents();
        $this->generateDocumentation();

        $this->uni('neoan')->hook('main','apiDocumentation',['content'=>$this->docString])->output();
    }
    function generateDocumentation(){
        $columns = ['param','return'];
        foreach ($this->apiComponents as $component=>$methods){
            $this->docString .= '<div class="box">';
            $this->docString .= '<h2 class="subtitle">'.$component.'</h2>';
            foreach ($methods as $method){
                $this->docString .= '<div ><strong>'.$method.'</strong></div>';
                $this->docString .= '<div class="columns">';
                $doc = $this->documentMethod('Neoan3\\Components\\'.ucfirst($component),$method.ucfirst($component));
                foreach ($columns as $column){
                    $this->docString .= '<div class="column">';
                    foreach ($doc as $docLine){
                        if(isset($docLine[$column])){
                            $this->docString .= '<p>' . $docLine[$column] .'</p>';
                        }
                    }
                    $this->docString .= '</div>';
                }
                $this->docString .= '</div>';
            }
            $this->docString .= '</div>';
        }
    }
    function getComponents(){
        $components = scandir(path.'/component');
        $apiIndicators = ['get','post','put','delete'];
        foreach ($components as $component){
            $cComponent = path.'/component/'.$component;
            if($component != '.' && $component != '..' &&is_dir($cComponent)){
                $class = ucfirst($component);
                if(file_exists($cComponent.'/'.$class.'.ctrl.php')){
                    $alias = 'Neoan3\\Components\\'.$class;
                    $c = new $alias();
                    $methods = get_class_methods($c);
                    foreach ($methods as $method){
                        foreach ($apiIndicators as $apiIndicator){
                            if($method == $apiIndicator.$class){
                                if(!isset($this->apiComponents[$component])){
                                    $this->apiComponents[$component] = [];
                                }
                                $this->apiComponents[$component][] = $apiIndicator;
                            }
                        }
                    }
                }
            }
        }
    }
    function documentMethod($class,$method){
        $r = new ReflectionMethod($class,$method);
        $docs = $r->getDocComment();
        if($docs){
            return $this->grabDoc($docs);
        } else {
            return [];
        }
    }
    function grabDoc($docBloc){
        $answer = [];
        preg_match_all('/@([a-z]+)([^\n]+)/',$docBloc,$matches);
        foreach($matches[0] as $i =>$match){
            $answer[] = [$matches[1][$i] => trim($matches[2][$i])];
        }

        return $answer;
    }
}
